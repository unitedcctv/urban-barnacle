// This file is auto-generated by @hey-api/openapi-ts

export const BalanceResponseSchema = {
  properties: {
    balance_eth: {
      type: "string",
      title: "Balance Eth",
    },
    balance_wei: {
      type: "string",
      title: "Balance Wei",
    },
    has_enough_funds: {
      type: "boolean",
      title: "Has Enough Funds",
    },
    required_eth: {
      type: "string",
      title: "Required Eth",
    },
    account_address: {
      type: "string",
      title: "Account Address",
    },
  },
  type: "object",
  required: [
    "balance_eth",
    "balance_wei",
    "has_enough_funds",
    "required_eth",
    "account_address",
  ],
  title: "BalanceResponse",
  description: "Response model for balance check",
} as const

export const Body_images_upload_fileSchema = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_images-upload_file",
} as const

export const Body_login_login_access_tokenSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: "string",
          pattern: "^password$",
        },
        {
          type: "null",
        },
      ],
      title: "Grant Type",
    },
    username: {
      type: "string",
      title: "Username",
    },
    password: {
      type: "string",
      format: "password",
      title: "Password",
    },
    scope: {
      type: "string",
      title: "Scope",
      default: "",
    },
    client_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Id",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      format: "password",
      title: "Client Secret",
    },
  },
  type: "object",
  required: ["username", "password"],
  title: "Body_login-login_access_token",
} as const

export const Body_models_upload_modelSchema = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_models-upload_model",
} as const

export const CDNFolderSchema = {
  type: "string",
  enum: ["images", "uploads", "models"],
  title: "CDNFolder",
  description: "Enum for CDN folder types.",
} as const

export const CheckoutRequestSchema = {
  properties: {
    item_id: {
      type: "string",
      title: "Item Id",
    },
    success_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Success Url",
    },
    cancel_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Cancel Url",
    },
  },
  type: "object",
  required: ["item_id"],
  title: "CheckoutRequest",
} as const

export const CheckoutResponseSchema = {
  properties: {
    url: {
      type: "string",
      title: "Url",
    },
  },
  type: "object",
  required: ["url"],
  title: "CheckoutResponse",
} as const

export const EmailConfirmationSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
  },
  type: "object",
  required: ["token"],
  title: "EmailConfirmation",
} as const

export const FundAccountResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    transaction_hash: {
      type: "string",
      title: "Transaction Hash",
    },
    funded_amount_eth: {
      type: "string",
      title: "Funded Amount Eth",
    },
    new_balance_eth: {
      type: "string",
      title: "New Balance Eth",
    },
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: [
    "success",
    "transaction_hash",
    "funded_amount_eth",
    "new_balance_eth",
    "message",
  ],
  title: "FundAccountResponse",
  description: "Response model for account funding",
} as const

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const

export const ImagePublicSchema = {
  properties: {
    path: {
      type: "string",
      maxLength: 500,
      title: "Path",
    },
    name: {
      type: "string",
      maxLength: 255,
      title: "Name",
    },
    item_id: {
      type: "string",
      format: "uuid",
      title: "Item Id",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
  },
  type: "object",
  required: ["path", "name", "item_id", "id", "created_at"],
  title: "ImagePublic",
} as const

export const ImagesPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/ImagePublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "ImagesPublic",
} as const

export const ItemCreateSchema = {
  properties: {
    title: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Title",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Images",
    },
    model: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Model",
    },
    certificate: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Certificate",
    },
    is_original: {
      type: "boolean",
      title: "Is Original",
      default: true,
    },
    variant_of: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Variant Of",
    },
    nft_token_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Nft Token Id",
    },
    nft_contract_address: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Contract Address",
    },
    nft_transaction_hash: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Transaction Hash",
    },
    nft_metadata_uri: {
      anyOf: [
        {
          type: "string",
          maxLength: 500,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Metadata Uri",
    },
    is_nft_enabled: {
      type: "boolean",
      title: "Is Nft Enabled",
      default: true,
    },
  },
  type: "object",
  required: ["title"],
  title: "ItemCreate",
} as const

export const ItemPublicSchema = {
  properties: {
    title: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Title",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Images",
    },
    model: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Model",
    },
    certificate: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Certificate",
    },
    is_original: {
      type: "boolean",
      title: "Is Original",
      default: true,
    },
    variant_of: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Variant Of",
    },
    nft_token_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Nft Token Id",
    },
    nft_contract_address: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Contract Address",
    },
    nft_transaction_hash: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Transaction Hash",
    },
    nft_metadata_uri: {
      anyOf: [
        {
          type: "string",
          maxLength: 500,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Metadata Uri",
    },
    is_nft_enabled: {
      type: "boolean",
      title: "Is Nft Enabled",
      default: true,
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    producer_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Producer Id",
    },
    image_urls: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Image Urls",
      default: [],
    },
  },
  type: "object",
  required: ["title", "id", "owner_id"],
  title: "ItemPublic",
} as const

export const ItemUpdateSchema = {
  properties: {
    title: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Title",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Images",
    },
    model: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Model",
    },
    certificate: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Certificate",
    },
    is_original: {
      type: "boolean",
      title: "Is Original",
      default: true,
    },
    variant_of: {
      anyOf: [
        {
          type: "string",
          format: "uuid",
        },
        {
          type: "null",
        },
      ],
      title: "Variant Of",
    },
    nft_token_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Nft Token Id",
    },
    nft_contract_address: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Contract Address",
    },
    nft_transaction_hash: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Transaction Hash",
    },
    nft_metadata_uri: {
      anyOf: [
        {
          type: "string",
          maxLength: 500,
        },
        {
          type: "null",
        },
      ],
      title: "Nft Metadata Uri",
    },
    is_nft_enabled: {
      type: "boolean",
      title: "Is Nft Enabled",
      default: true,
    },
  },
  type: "object",
  title: "ItemUpdate",
} as const

export const ItemWithPermissionsSchema = {
  properties: {
    item: {
      $ref: "#/components/schemas/ItemPublic",
    },
    can_edit: {
      type: "boolean",
      title: "Can Edit",
      default: false,
    },
  },
  type: "object",
  required: ["item"],
  title: "ItemWithPermissions",
  description: "Item data with edit permissions",
} as const

export const ItemsPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/ItemPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "ItemsPublic",
} as const

export const MessageSchema = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: ["message"],
  title: "Message",
} as const

export const NavigationItemSchema = {
  properties: {
    title: {
      type: "string",
      title: "Title",
    },
    path: {
      type: "string",
      title: "Path",
    },
    icon: {
      type: "string",
      title: "Icon",
    },
    action: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action",
    },
  },
  type: "object",
  required: ["title", "path", "icon", "action"],
  title: "NavigationItem",
} as const

export const NewPasswordSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
    new_password: {
      type: "string",
      maxLength: 40,
      minLength: 8,
      title: "New Password",
    },
  },
  type: "object",
  required: ["token", "new_password"],
  title: "NewPassword",
} as const

export const PrivateUserCreateSchema = {
  properties: {
    email: {
      type: "string",
      title: "Email",
    },
    password: {
      type: "string",
      title: "Password",
    },
    full_name: {
      type: "string",
      title: "Full Name",
    },
    is_verified: {
      type: "boolean",
      title: "Is Verified",
      default: false,
    },
  },
  type: "object",
  required: ["email", "password", "full_name"],
  title: "PrivateUserCreate",
} as const

export const ProducerCreateSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Name",
    },
    location: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    logo_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Logo Url",
    },
    portfolio_images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Portfolio Images",
    },
  },
  type: "object",
  required: ["name"],
  title: "ProducerCreate",
} as const

export const ProducerPublicSchema = {
  properties: {
    name: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Name",
    },
    location: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    logo_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Logo Url",
    },
    portfolio_images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Portfolio Images",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
  },
  type: "object",
  required: ["name", "id", "created_at"],
  title: "ProducerPublic",
} as const

export const ProducerUpdateSchema = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    location: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Location",
    },
    logo_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Logo Url",
    },
    portfolio_images: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Portfolio Images",
    },
  },
  type: "object",
  title: "ProducerUpdate",
} as const

export const ProducersPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/ProducerPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "ProducersPublic",
} as const

export const TokenSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
    },
    token_type: {
      type: "string",
      title: "Token Type",
      default: "bearer",
    },
  },
  type: "object",
  required: ["access_token"],
  title: "Token",
} as const

export const UpdatePasswordSchema = {
  properties: {
    current_password: {
      type: "string",
      maxLength: 40,
      minLength: 8,
      title: "Current Password",
    },
    new_password: {
      type: "string",
      maxLength: 40,
      minLength: 8,
      title: "New Password",
    },
  },
  type: "object",
  required: ["current_password", "new_password"],
  title: "UpdatePassword",
} as const

export const UserCreateSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: false,
    },
    permissions: {
      $ref: "#/components/schemas/UserPermission",
      default: "guest",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    password: {
      type: "string",
      maxLength: 40,
      minLength: 8,
      title: "Password",
    },
  },
  type: "object",
  required: ["email", "password"],
  title: "UserCreate",
} as const

export const UserPermissionSchema = {
  type: "string",
  enum: ["superuser", "guest", "collector", "customer", "investor", "producer"],
  title: "UserPermission",
} as const

export const UserPublicSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: false,
    },
    permissions: {
      $ref: "#/components/schemas/UserPermission",
      default: "guest",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
  },
  type: "object",
  required: ["email", "id"],
  title: "UserPublic",
} as const

export const UserRegisterSchema = {
  properties: {
    email: {
      type: "string",
      maxLength: 255,
      format: "email",
      title: "Email",
    },
    password: {
      type: "string",
      maxLength: 40,
      minLength: 8,
      title: "Password",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
  },
  type: "object",
  required: ["email", "password"],
  title: "UserRegister",
} as const

export const UserUpdateSchema = {
  properties: {
    email: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: false,
    },
    permissions: {
      $ref: "#/components/schemas/UserPermission",
      default: "guest",
    },
    full_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    password: {
      anyOf: [
        {
          type: "string",
          maxLength: 40,
          minLength: 8,
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
  },
  type: "object",
  title: "UserUpdate",
} as const

export const UserUpdateMeSchema = {
  properties: {
    full_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Full Name",
    },
    email: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
  },
  type: "object",
  title: "UserUpdateMe",
} as const

export const UsersPublicSchema = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/UserPublic",
      },
      type: "array",
      title: "Data",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["data", "count"],
  title: "UsersPublic",
} as const

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const
