// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersConfirmEmailData,
  UsersConfirmEmailResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsListPermissionsResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadMyItemsData,
  ItemsReadMyItemsResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsMintItemNftData,
  ItemsMintItemNftResponse,
  ImagesUploadFileData,
  ImagesUploadFileResponse,
  ImagesGetFilesData,
  ImagesGetFilesResponse,
  ImagesDeleteFileData,
  ImagesDeleteFileResponse,
  ImagesGetFileData,
  ImagesGetFileResponse,
  ImagesDeleteItemImagesData,
  ImagesDeleteItemImagesResponse,
  ModelsUploadModelData,
  ModelsUploadModelResponse,
  ModelsGetModelData,
  ModelsGetModelResponse,
  ModelsDeleteModelData,
  ModelsDeleteModelResponse,
  ModelsDownloadModelData,
  ModelsDownloadModelResponse,
  ModelsDeleteItemModelData,
  ModelsDeleteItemModelResponse,
  PaymentsCreateCheckoutSessionData,
  PaymentsCreateCheckoutSessionResponse,
  PaymentsPaymentSuccessData,
  PaymentsPaymentSuccessResponse,
  PaymentsPaymentCancelResponse,
  PaymentsStripeWebhookResponse,
  PaymentsGetStripeConfigResponse,
  ProducersReadProducersData,
  ProducersReadProducersResponse,
  ProducersCreateProducerData,
  ProducersCreateProducerResponse,
  ProducersReadProducerData,
  ProducersReadProducerResponse,
  ProducersUpdateProducerData,
  ProducersUpdateProducerResponse,
  ProducersDeleteProducerData,
  ProducersDeleteProducerResponse,
  BlockchainCheckEthBalanceResponse,
  BlockchainFundAccountResponse,
  BlockchainGetBlockchainStatusResponse,
  NavigationGetNavigationItemsData,
  NavigationGetNavigationItemsResponse,
  AiChatResponse,
  AiRegisterWatchEndpointResponse,
  AiPopulateChunksEndpointResponse,
  AiDriveChangeWebhookData,
  AiDriveChangeWebhookResponse,
  BusinessPlanDownloadBusinessPlanResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  UsersApiCurrentUserResponse,
} from "./types.gen"

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginLoginAccessToken = (
  data: LoginLoginAccessTokenData,
): CancelablePromise<LoginLoginAccessTokenResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/login/access-token",
    formData: data.formData,
    mediaType: "application/x-www-form-urlencoded",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Test Token
 * Test access token
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const loginTestToken = (): CancelablePromise<LoginTestTokenResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/login/test-token",
  })
}

/**
 * Recover Password
 * Password Recovery
 * @param data The data for the request.
 * @param data.email
 * @returns Message Successful Response
 * @throws ApiError
 */
export const loginRecoverPassword = (
  data: LoginRecoverPasswordData,
): CancelablePromise<LoginRecoverPasswordResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/password-recovery/{email}",
    path: {
      email: data.email,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Reset Password
 * Reset password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const loginResetPassword = (
  data: LoginResetPasswordData,
): CancelablePromise<LoginResetPasswordResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/reset-password/",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 * @param data The data for the request.
 * @param data.email
 * @returns string Successful Response
 * @throws ApiError
 */
export const loginRecoverPasswordHtmlContent = (
  data: LoginRecoverPasswordHtmlContentData,
): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/password-recovery-html-content/{email}",
    path: {
      email: data.email,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read Users
 * Retrieve users.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns UsersPublic Successful Response
 * @throws ApiError
 */
export const usersReadUsers = (
  data: UsersReadUsersData = {},
): CancelablePromise<UsersReadUsersResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/users/",
    query: {
      skip: data.skip,
      limit: data.limit,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Create User
 * Create new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersCreateUser = (
  data: UsersCreateUserData,
): CancelablePromise<UsersCreateUserResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/users/",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read User Me
 * Get current user.
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersReadUserMe =
  (): CancelablePromise<UsersReadUserMeResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

/**
 * Delete User Me
 * Delete own user.
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersDeleteUserMe =
  (): CancelablePromise<UsersDeleteUserMeResponse> => {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

/**
 * Update User Me
 * Update own user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersUpdateUserMe = (
  data: UsersUpdateUserMeData,
): CancelablePromise<UsersUpdateUserMeResponse> => {
  return __request(OpenAPI, {
    method: "PATCH",
    url: "/api/v1/users/me",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Update Password Me
 * Update own password.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersUpdatePasswordMe = (
  data: UsersUpdatePasswordMeData,
): CancelablePromise<UsersUpdatePasswordMeResponse> => {
  return __request(OpenAPI, {
    method: "PATCH",
    url: "/api/v1/users/me/password",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Register User
 * Create new user without the need to be logged in.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersRegisterUser = (
  data: UsersRegisterUserData,
): CancelablePromise<UsersRegisterUserResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/users/signup",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Confirm Email
 * Confirm user email address and activate account.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersConfirmEmail = (
  data: UsersConfirmEmailData,
): CancelablePromise<UsersConfirmEmailResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/users/confirm-email",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read User By Id
 * Get a specific user by id.
 * @param data The data for the request.
 * @param data.userId
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersReadUserById = (
  data: UsersReadUserByIdData,
): CancelablePromise<UsersReadUserByIdResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/users/{user_id}",
    path: {
      user_id: data.userId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Update User
 * Update a user.
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersUpdateUser = (
  data: UsersUpdateUserData,
): CancelablePromise<UsersUpdateUserResponse> => {
  return __request(OpenAPI, {
    method: "PATCH",
    url: "/api/v1/users/{user_id}",
    path: {
      user_id: data.userId,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete User
 * Delete a user.
 * @param data The data for the request.
 * @param data.userId
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersDeleteUser = (
  data: UsersDeleteUserData,
): CancelablePromise<UsersDeleteUserResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/users/{user_id}",
    path: {
      user_id: data.userId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Test Email
 * Test emails.
 * @param data The data for the request.
 * @param data.emailTo
 * @returns Message Successful Response
 * @throws ApiError
 */
export const utilsTestEmail = (
  data: UtilsTestEmailData,
): CancelablePromise<UtilsTestEmailResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/utils/test-email/",
    query: {
      email_to: data.emailTo,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * List Permissions
 * Return available user-permission strings.
 * @returns string Successful Response
 * @throws ApiError
 */
export const utilsListPermissions =
  (): CancelablePromise<UtilsListPermissionsResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/permissions/",
    })
  }

/**
 * Read Items
 * Retrieve items.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns ItemsPublic Successful Response
 * @throws ApiError
 */
export const itemsReadItems = (
  data: ItemsReadItemsData = {},
): CancelablePromise<ItemsReadItemsResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/items/",
    query: {
      skip: data.skip,
      limit: data.limit,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Create Item
 * Create new item.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsCreateItem = (
  data: ItemsCreateItemData,
): CancelablePromise<ItemsCreateItemResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/items/",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read My Items
 * Retrieve items for the current user.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns ItemsPublic Successful Response
 * @throws ApiError
 */
export const itemsReadMyItems = (
  data: ItemsReadMyItemsData = {},
): CancelablePromise<ItemsReadMyItemsResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/items/my-items/",
    query: {
      skip: data.skip,
      limit: data.limit,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read Item
 * Get item by ID with edit permissions.
 * @param data The data for the request.
 * @param data.id
 * @returns ItemWithPermissions Successful Response
 * @throws ApiError
 */
export const itemsReadItem = (
  data: ItemsReadItemData,
): CancelablePromise<ItemsReadItemResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/items/{id}",
    path: {
      id: data.id,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Update Item
 * Update an item.
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsUpdateItem = (
  data: ItemsUpdateItemData,
): CancelablePromise<ItemsUpdateItemResponse> => {
  return __request(OpenAPI, {
    method: "PUT",
    url: "/api/v1/items/{id}",
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete Item
 * Delete an item.
 * @param data The data for the request.
 * @param data.id
 * @returns Message Successful Response
 * @throws ApiError
 */
export const itemsDeleteItem = (
  data: ItemsDeleteItemData,
): CancelablePromise<ItemsDeleteItemResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/items/{id}",
    path: {
      id: data.id,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Mint Item Nft
 * Mint NFT for an existing item.
 * @param data The data for the request.
 * @param data.id
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsMintItemNft = (
  data: ItemsMintItemNftData,
): CancelablePromise<ItemsMintItemNftResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/items/{id}/mint-nft",
    path: {
      id: data.id,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Upload File
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.formData
 * @returns string Successful Response
 * @throws ApiError
 */
export const imagesUploadFile = (
  data: ImagesUploadFileData,
): CancelablePromise<ImagesUploadFileResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/images/{item_id}/{user_id}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
    },
    formData: data.formData,
    mediaType: "multipart/form-data",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Get Files
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesGetFiles = (
  data: ImagesGetFilesData,
): CancelablePromise<ImagesGetFilesResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/images/{item_id}/{user_id}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete File
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.fileName
 * @returns string Successful Response
 * @throws ApiError
 */
export const imagesDeleteFile = (
  data: ImagesDeleteFileData,
): CancelablePromise<ImagesDeleteFileResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/images/{item_id}/{user_id}/{file_name}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
      file_name: data.fileName,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Get File
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.fileName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesGetFile = (
  data: ImagesGetFileData,
): CancelablePromise<ImagesGetFileResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/images/{item_id}/{user_id}/{file_name}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
      file_name: data.fileName,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete Item Images
 * @param data The data for the request.
 * @param data.itemId
 * @returns string Successful Response
 * @throws ApiError
 */
export const imagesDeleteItemImages = (
  data: ImagesDeleteItemImagesData,
): CancelablePromise<ImagesDeleteItemImagesResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/images/{item_id}",
    path: {
      item_id: data.itemId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Upload Model
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.formData
 * @returns string Successful Response
 * @throws ApiError
 */
export const modelsUploadModel = (
  data: ModelsUploadModelData,
): CancelablePromise<ModelsUploadModelResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/models/{item_id}/{user_id}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
    },
    formData: data.formData,
    mediaType: "multipart/form-data",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Get Model
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const modelsGetModel = (
  data: ModelsGetModelData,
): CancelablePromise<ModelsGetModelResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/models/{item_id}/{user_id}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete Model
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.fileName
 * @returns string Successful Response
 * @throws ApiError
 */
export const modelsDeleteModel = (
  data: ModelsDeleteModelData,
): CancelablePromise<ModelsDeleteModelResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/models/{item_id}/{user_id}/{file_name}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
      file_name: data.fileName,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Download Model
 * @param data The data for the request.
 * @param data.itemId
 * @param data.userId
 * @param data.fileName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const modelsDownloadModel = (
  data: ModelsDownloadModelData,
): CancelablePromise<ModelsDownloadModelResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/models/{item_id}/{user_id}/{file_name}",
    path: {
      item_id: data.itemId,
      user_id: data.userId,
      file_name: data.fileName,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete Item Model
 * @param data The data for the request.
 * @param data.itemId
 * @returns string Successful Response
 * @throws ApiError
 */
export const modelsDeleteItemModel = (
  data: ModelsDeleteItemModelData,
): CancelablePromise<ModelsDeleteItemModelResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/models/{item_id}",
    path: {
      item_id: data.itemId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Create Checkout Session
 * Create a Stripe checkout session for purchasing a model.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CheckoutResponse Successful Response
 * @throws ApiError
 */
export const paymentsCreateCheckoutSession = (
  data: PaymentsCreateCheckoutSessionData,
): CancelablePromise<PaymentsCreateCheckoutSessionResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/payments/create-checkout-session",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Payment Success
 * Handle successful payment and provide secure download link.
 * @param data The data for the request.
 * @param data.sessionId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const paymentsPaymentSuccess = (
  data: PaymentsPaymentSuccessData,
): CancelablePromise<PaymentsPaymentSuccessResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/payments/success",
    query: {
      session_id: data.sessionId,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Payment Cancel
 * Handle payment cancellation.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const paymentsPaymentCancel =
  (): CancelablePromise<PaymentsPaymentCancelResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/payments/cancel",
    })
  }

/**
 * Stripe Webhook
 * Handle Stripe webhook events (optional - for additional security and logging).
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const paymentsStripeWebhook =
  (): CancelablePromise<PaymentsStripeWebhookResponse> => {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/payments/webhook",
    })
  }

/**
 * Get Stripe Config
 * Get Stripe publishable key for frontend.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const paymentsGetStripeConfig =
  (): CancelablePromise<PaymentsGetStripeConfigResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/payments/config",
    })
  }

/**
 * Read Producers
 * Retrieve producers.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns ProducersPublic Successful Response
 * @throws ApiError
 */
export const producersReadProducers = (
  data: ProducersReadProducersData = {},
): CancelablePromise<ProducersReadProducersResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/producers/",
    query: {
      skip: data.skip,
      limit: data.limit,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Create Producer
 * Create new producer.
 * Only users with producer permissions can create producers.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ProducerPublic Successful Response
 * @throws ApiError
 */
export const producersCreateProducer = (
  data: ProducersCreateProducerData,
): CancelablePromise<ProducersCreateProducerResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/producers/",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Read Producer
 * Get producer by ID.
 * @param data The data for the request.
 * @param data.id
 * @returns ProducerPublic Successful Response
 * @throws ApiError
 */
export const producersReadProducer = (
  data: ProducersReadProducerData,
): CancelablePromise<ProducersReadProducerResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/producers/{id}",
    path: {
      id: data.id,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Update Producer
 * Update a producer.
 * Only users with producer permissions can update producers.
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns ProducerPublic Successful Response
 * @throws ApiError
 */
export const producersUpdateProducer = (
  data: ProducersUpdateProducerData,
): CancelablePromise<ProducersUpdateProducerResponse> => {
  return __request(OpenAPI, {
    method: "PUT",
    url: "/api/v1/producers/{id}",
    path: {
      id: data.id,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Delete Producer
 * Delete a producer.
 * Only users with producer permissions can delete producers.
 * @param data The data for the request.
 * @param data.id
 * @returns Message Successful Response
 * @throws ApiError
 */
export const producersDeleteProducer = (
  data: ProducersDeleteProducerData,
): CancelablePromise<ProducersDeleteProducerResponse> => {
  return __request(OpenAPI, {
    method: "DELETE",
    url: "/api/v1/producers/{id}",
    path: {
      id: data.id,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Check Eth Balance
 * Check ETH balance and determine if sufficient funds are available for NFT minting.
 * @returns BalanceResponse Successful Response
 * @throws ApiError
 */
export const blockchainCheckEthBalance =
  (): CancelablePromise<BlockchainCheckEthBalanceResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/blockchain/balance",
    })
  }

/**
 * Fund Account
 * Fund the blockchain account with ETH from Hardhat's default accounts.
 * Only works in development/staging environments.
 * @returns FundAccountResponse Successful Response
 * @throws ApiError
 */
export const blockchainFundAccount =
  (): CancelablePromise<BlockchainFundAccountResponse> => {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/blockchain/fund-account",
    })
  }

/**
 * Get Blockchain Status
 * Get blockchain service status and configuration.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const blockchainGetBlockchainStatus =
  (): CancelablePromise<BlockchainGetBlockchainStatusResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/blockchain/status",
    })
  }

/**
 * Get Navigation Items
 * Return navigation items appropriate for the current (optional) user.
 * @param data The data for the request.
 * @param data.authorization
 * @returns NavigationItem Successful Response
 * @throws ApiError
 */
export const navigationGetNavigationItems = (
  data: NavigationGetNavigationItemsData = {},
): CancelablePromise<NavigationGetNavigationItemsResponse> => {
  return __request(OpenAPI, {
    method: "GET",
    url: "/api/v1/navigation/",
    headers: {
      Authorization: data.authorization,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Chat
 * AI chat endpoint with comprehensive error handling.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const aiChat = (): CancelablePromise<AiChatResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/ai/chat",
  })
}

/**
 * Register Watch Endpoint
 * Manually trigger creation of a Drive watch channel.
 * Requires SUPERUSER permission.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const aiRegisterWatchEndpoint =
  (): CancelablePromise<AiRegisterWatchEndpointResponse> => {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/drive/register-watch",
    })
  }

/**
 * Populate Chunks Endpoint
 * Manually populate chunks table with business plan content.
 * Requires SUPERUSER permission.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const aiPopulateChunksEndpoint =
  (): CancelablePromise<AiPopulateChunksEndpointResponse> => {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/drive/populate-chunks",
    })
  }

/**
 * Drive Change Webhook
 * @param data The data for the request.
 * @param data.xGoogResourceState
 * @param data.xGoogChannelToken
 * @returns void Successful Response
 * @throws ApiError
 */
export const aiDriveChangeWebhook = (
  data: AiDriveChangeWebhookData = {},
): CancelablePromise<AiDriveChangeWebhookResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/drive/webhook",
    headers: {
      "x-goog-resource-state": data.xGoogResourceState,
      "x-goog-channel-token": data.xGoogChannelToken,
    },
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Download Business Plan
 * Download the business plan PDF directly from Google Drive.
 * Requires authentication.
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const businessPlanDownloadBusinessPlan =
  (): CancelablePromise<BusinessPlanDownloadBusinessPlanResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/business-plan/download",
    })
  }

/**
 * Create User
 * Create a new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const privateCreateUser = (
  data: PrivateCreateUserData,
): CancelablePromise<PrivateCreateUserResponse> => {
  return __request(OpenAPI, {
    method: "POST",
    url: "/api/v1/private/users/",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  })
}

/**
 * Api Current User
 * Return the authenticated user (used by React app).
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersApiCurrentUser =
  (): CancelablePromise<UsersApiCurrentUserResponse> => {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/currentUser",
    })
  }
