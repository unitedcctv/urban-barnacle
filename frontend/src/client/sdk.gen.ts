// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, ImagesUploadFileData, ImagesUploadFileResponse, ImagesDeleteFileData, ImagesDeleteFileResponse, ImagesGetFilesResponse, ImagesGetFileData, ImagesGetFileResponse, PrivateCreateUserData, PrivateCreateUserResponse } from './types.gen';

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginLoginAccessToken = (data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/login/access-token',
        formData: data.formData,
        mediaType: 'application/x-www-form-urlencoded',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Test Token
 * Test access token
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const loginTestToken = (): CancelablePromise<LoginTestTokenResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/login/test-token'
    });
};

/**
 * Recover Password
 * Password Recovery
 * @param data The data for the request.
 * @param data.email
 * @returns Message Successful Response
 * @throws ApiError
 */
export const loginRecoverPassword = (data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/password-recovery/{email}',
        path: {
            email: data.email
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Reset Password
 * Reset password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const loginResetPassword = (data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/reset-password/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 * @param data The data for the request.
 * @param data.email
 * @returns string Successful Response
 * @throws ApiError
 */
export const loginRecoverPasswordHtmlContent = (data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/password-recovery-html-content/{email}',
        path: {
            email: data.email
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Read Users
 * Retrieve users.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns UsersPublic Successful Response
 * @throws ApiError
 */
export const usersReadUsers = (data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/',
        query: {
            skip: data.skip,
            limit: data.limit
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create User
 * Create new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersCreateUser = (data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/users/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Read User Me
 * Get current user.
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersReadUserMe = (): CancelablePromise<UsersReadUserMeResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/me'
    });
};

/**
 * Delete User Me
 * Delete own user.
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersDeleteUserMe = (): CancelablePromise<UsersDeleteUserMeResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v1/users/me'
    });
};

/**
 * Update User Me
 * Update own user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersUpdateUserMe = (data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v1/users/me',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Password Me
 * Update own password.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersUpdatePasswordMe = (data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v1/users/me/password',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersRegisterUser = (data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/users/signup',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 * @param data The data for the request.
 * @param data.userId
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersReadUserById = (data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update User
 * Update a user.
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersUpdateUser = (data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete User
 * Delete a user.
 * @param data The data for the request.
 * @param data.userId
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersDeleteUser = (data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v1/users/{user_id}',
        path: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Test Email
 * Test emails.
 * @param data The data for the request.
 * @param data.emailTo
 * @returns Message Successful Response
 * @throws ApiError
 */
export const utilsTestEmail = (data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/utils/test-email/',
        query: {
            email_to: data.emailTo
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Health Check
 * @returns boolean Successful Response
 * @throws ApiError
 */
export const utilsHealthCheck = (): CancelablePromise<UtilsHealthCheckResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/utils/health-check/'
    });
};

/**
 * Read Items
 * Retrieve items.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns ItemsPublic Successful Response
 * @throws ApiError
 */
export const itemsReadItems = (data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/items/',
        query: {
            skip: data.skip,
            limit: data.limit
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Item
 * Create new item.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsCreateItem = (data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/items/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Read Item
 * Get item by ID.
 * @param data The data for the request.
 * @param data.id
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsReadItem = (data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/items/{id}',
        path: {
            id: data.id
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Item
 * Update an item.
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns ItemPublic Successful Response
 * @throws ApiError
 */
export const itemsUpdateItem = (data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v1/items/{id}',
        path: {
            id: data.id
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Item
 * Delete an item.
 * @param data The data for the request.
 * @param data.id
 * @returns Message Successful Response
 * @throws ApiError
 */
export const itemsDeleteItem = (data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v1/items/{id}',
        path: {
            id: data.id
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Upload File
 * @param data The data for the request.
 * @param data.formData
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesUploadFile = (data: ImagesUploadFileData): CancelablePromise<ImagesUploadFileResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/images/',
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete File
 * @param data The data for the request.
 * @param data.fileUrl
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesDeleteFile = (data: ImagesDeleteFileData): CancelablePromise<ImagesDeleteFileResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v1/images/',
        query: {
            file_url: data.fileUrl
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Files
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesGetFiles = (): CancelablePromise<ImagesGetFilesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/images/'
    });
};

/**
 * Get File
 * @param data The data for the request.
 * @param data.fileName
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const imagesGetFile = (data: ImagesGetFileData): CancelablePromise<ImagesGetFileResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v1/images/{file_name}',
        path: {
            file_name: data.fileName
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create User
 * Create a new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const privateCreateUser = (data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v1/private/users/',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};