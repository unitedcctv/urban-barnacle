services:

  db:
    image: pgvector/pgvector:pg12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  blockchain:
    build:
      context: ./contracts
    restart: always
    ports:
      - "8545:8545"  # Hardhat node port
    networks:
      - default
    environment:
      - NODE_ENV=development
    volumes:
      - blockchain-data:/app/cache
      - blockchain-artifacts:/app/artifacts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - BUNNYCDN_STORAGE_ZONE=${BUNNYCDN_STORAGE_ZONE}
      - BUNNYCDN_API_KEY=${BUNNYCDN_API_KEY}
      - BUNNYCDN_FOLDER_NAME=${BUNNYCDN_FOLDER_NAME:-uploads}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS?Variable not set}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - BUNNYCDN_STORAGE_ZONE=${BUNNYCDN_STORAGE_ZONE}
      - BUNNYCDN_API_KEY=${BUNNYCDN_API_KEY}
      - BUNNYCDN_FOLDER_NAME=${BUNNYCDN_FOLDER_NAME:-uploads}
      - BUSINESS_PLAN_DOC_ID=${BUSINESS_PLAN_DOC_ID?Variable not set}
      - AI_DATA_DIR=${AI_DATA_DIR?Variable not set}
      - GDRIVE_SERVICE_ACCOUNT_JSON=${GDRIVE_SERVICE_ACCOUNT_JSON?Variable not set}
      - DRIVE_WEBHOOK_TOKEN=${DRIVE_WEBHOOK_TOKEN?Variable not set}
      - VITE_WEBHOOK_URL=${VITE_WEBHOOK_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY?Variable not set}
      # Blockchain configuration
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL?Variable not set}
      - ETHEREUM_PRIVATE_KEY=${ETHEREUM_PRIVATE_KEY?Variable not set}
      - BLOCKCHAIN_ENABLED=${BLOCKCHAIN_ENABLED?Variable not set}

    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket,sys; socket.create_connection((\"localhost\",8000),2).close()' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

    build:
      context: ./backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8000

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`api.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le

      # Enable redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`dashboard.${DOMAIN?Variable not set}`) || Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`dashboard.${DOMAIN?Variable not set}`) || Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le

      # Enable redirection for HTTP and HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect

  mailcatcher:
    image: schickling/mailcatcher
    restart: always
    networks:
      - traefik-public
      - default
    environment:
      - MAILCATCHER_SMTP_IP=0.0.0.0
      - MAILCATCHER_SMTP_PORT=1025
      - MAILCATCHER_HTTP_IP=0.0.0.0
      - MAILCATCHER_HTTP_PORT=1080
    labels:
      - traefik.enable=${MAILCATCHER_ENABLED:-false}
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-http.rule=Host(`mailcatcher.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-https.rule=Host(`mailcatcher.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-https.middlewares=${STACK_NAME?Variable not set}-mailcatcher-auth
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-mailcatcher-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-mailcatcher.loadbalancer.server.port=1080
      # Basic Auth middleware
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-mailcatcher-auth.basicauth.users=${MAILCATCHER_AUTH_USERS:-admin:$$2y$$10$$2b2cu/b9O/B1pxq2fxeWuOdrs3KM6QOdUbrr4FQjHWxcpsZH4aOOy}

volumes:
  app-db-data:
  blockchain-data:
  blockchain-artifacts:

networks:
  traefik-public:
    external: true
