name: Deploy to Staging

on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Do not deploy in the main repository, only in user projects
    if: github.repository_owner != 'fastapi'
    runs-on:
      - self-hosted
      - staging
    environment: staging
    env:
      ENVIRONMENT: staging
      PROJECT_NAME: Urban Barnacle
      BACKEND_CORS_ORIGINS: ${{ vars.BACKEND_CORS_ORIGINS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ vars.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      # Mailcatcher SMTP Configuration for staging
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_PORT: ${{ vars.SMTP_PORT }}
      SMTP_TLS: ${{ vars.SMTP_TLS }}
      SMTP_USER: 
      SMTP_PASSWORD: 
      EMAILS_FROM_EMAIL: noreply@${{ vars.DOMAIN }}
      # Mailcatcher Security Configuration
      MAILCATCHER_ENABLED: ${{ vars.MAILCATCHER_ENABLED }}
      MAILCATCHER_AUTH_USERS: ${{ secrets.MAILCATCHER_AUTH_USERS }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      DOMAIN: ${{ vars.DOMAIN }}
      FRONTEND_HOST: ${{ vars.FRONTEND_HOST }}
      STACK_NAME: ${{ vars.STACK_NAME }}
      DOCKER_IMAGE_BACKEND: ${{ vars.DOCKER_IMAGE_BACKEND }}
      DOCKER_IMAGE_FRONTEND: ${{ vars.DOCKER_IMAGE_FRONTEND }}
      BUSINESS_PLAN_DOC_ID: ${{ secrets.BUSINESS_PLAN_DOC_ID }}
      AI_DATA_DIR: ${{ vars.AI_DATA_DIR }}
      GDRIVE_SERVICE_ACCOUNT_JSON: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
      DRIVE_WEBHOOK_TOKEN: ${{ secrets.DRIVE_WEBHOOK_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # Stripe Payment Configuration
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLISHABLE_KEY: ${{ vars.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET || '' }}
      # BunnyCDN Configuration
      BUNNYCDN_STORAGE_ZONE: ${{ vars.BUNNYCDN_STORAGE_ZONE }}
      BUNNYCDN_API_KEY: ${{ secrets.BUNNYCDN_API_KEY }}
      # Blockchain/Ethereum Configuration
      ETHEREUM_NETWORK: ${{ vars.ETHEREUM_NETWORK }}
      ETHEREUM_RPC_URL: ${{ vars.ETHEREUM_RPC_URL }}
      ETHEREUM_CHAIN_ID: ${{ vars.ETHEREUM_CHAIN_ID }}
      ETHEREUM_PRIVATE_KEY: ${{ secrets.ETHEREUM_PRIVATE_KEY }}
      ETHEREUM_ADDRESS: ${{ vars.ETHEREUM_ADDRESS }}
      CONTRACT_DEPLOY_GAS_LIMIT: ${{ vars.CONTRACT_DEPLOY_GAS_LIMIT }}
      CONTRACT_DEPLOY_GAS_PRICE: ${{ vars.CONTRACT_DEPLOY_GAS_PRICE }}
      BLOCKCHAIN_ENABLED: ${{ vars.BLOCKCHAIN_ENABLED }}
      BLOCKCHAIN_AUTO_DEPLOY: ${{ vars.BLOCKCHAIN_AUTO_DEPLOY }}
      # Social Media Links
      VITE_MASTODON_URL: ${{ vars.VITE_MASTODON_URL }}
      VITE_BLUESKY_URL: ${{ vars.VITE_BLUESKY_URL }}
      VITE_REDDIT_URL: ${{ vars.VITE_REDDIT_URL }}
      VITE_LINKEDIN_URL: ${{ vars.VITE_LINKEDIN_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prune Docker
        run: docker system prune -af
      - name: Reset stack (remove existing containers, keep volumes)
        run: |
          docker compose -f docker-compose.yml --project-name ${{ vars.STACK_NAME }} down || true
      - name: Build and Push Docker Images
        run: docker compose -f docker-compose.yml --project-name ${{ vars.STACK_NAME }} build
      - name: Deploy
        run: docker compose -f docker-compose.yml --project-name ${{ vars.STACK_NAME }} up -d
      - name: Show prestart logs if it fails
        if: failure()
        run: |
          docker compose -f docker-compose.yml --project-name ${{ vars.STACK_NAME }} logs prestart
