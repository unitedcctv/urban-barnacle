# Development-specific Docker Compose overrides
# Consolidates all development settings including existing override.yml
# Use with: docker compose watch (automatically loads as override)

services:
  # Traefik proxy for local development
  proxy:
    image: traefik:3.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false
    networks:
      - traefik-public
      - default

  # Database with development overrides
  db:
    restart: "no"
    ports:
      - "5432:5432"

  # Adminer with development overrides
  adminer:
    restart: "no"
    ports:
      - "8080:8080"

  # Backend with development overrides
  backend:
    restart: "no"
    ports:
      - "8000:8000"
    build:
      context: ./backend
    labels:
      # Override production Traefik labels for local development
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.backend-dev.loadbalancer.server.port=8000
      - traefik.http.routers.backend-dev-http.rule=Host(`localhost`) && PathPrefix(`/api/`)
      - traefik.http.routers.backend-dev-http.entrypoints=http
      - traefik.http.routers.backend-dev-http.service=backend-dev
    command:
      - fastapi
      - run
      - --reload
      - "app/main.py"
    develop:
      watch:
        - path: ./backend
          action: sync
          target: /app
          ignore:
            - ./backend/.venv
            - .venv
        - path: ./backend/pyproject.toml
          action: rebuild
    volumes:
      - ./backend/htmlcov:/app/htmlcov
    environment:
      SMTP_HOST: "mailcatcher"
      SMTP_PORT: "1025"
      SMTP_TLS: "false"
      EMAILS_FROM_EMAIL: "noreply@example.com"
      # CORS configuration for local development
      BACKEND_CORS_ORIGINS: "http://localhost:5173,http://localhost:3000,http://localhost"
      # TODO: Blockchain/NFT certificate functionality temporarily disabled
      # Re-enable when blockchain features are needed again
      # Blockchain configuration
      # WEB3_URL: "http://blockchain:8545"
      BLOCKCHAIN_ENABLED: "false"
    depends_on:
      db:
        condition: service_healthy
      # TODO: Blockchain dependency disabled - uncomment when re-enabling blockchain
      # blockchain:
      #   condition: service_started
      prestart:
        condition: service_completed_successfully

  # Prestart (migrations/initial data) - runs automatically before backend starts
  prestart:
    restart: "no"

  # Mailcatcher for email testing
  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"

  # Frontend with development overrides
  frontend:
    restart: "no"
    ports:
      - "5173:80"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://localhost:8000
        - NODE_ENV=development
    develop:
      watch:
        - path: ./frontend
          action: sync
          target: /app
          ignore:
            - ./frontend/node_modules
            - node_modules
        - path: ./frontend/package.json
          action: rebuild

  # TODO: Blockchain/NFT certificate functionality temporarily disabled
  # Re-enable these services when blockchain features are needed again
  # Blockchain service for NFT integration
  # blockchain:
  #   build:
  #     context: ./contracts
  #   restart: "no"  # Development override
  #   ports:
  #     - "8545:8545"   # Hardhat node
  #     - "8546:8546"   # Hardhat websocket (if needed)
  #   environment:
  #     - NODE_ENV=development
  #     - DEBUG=hardhat*
  #   healthcheck:
  #     test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request({hostname: '127.0.0.1', port: 8545, method: 'POST', headers: {'Content-Type': 'application/json'}}, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.write(JSON.stringify({jsonrpc: '2.0', method: 'eth_blockNumber', params: [], id: 1})); req.end();"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   develop:
  #     watch:
  #       - path: ./contracts
  #         action: sync
  #         target: /app
  #         ignore:
  #           - ./contracts/node_modules
  #           - node_modules
  #           - ./contracts/cache
  #           - ./contracts/artifacts
  #       - path: ./contracts/package.json
  #         action: rebuild
  #       - path: ./contracts/hardhat.config.js
  #         action: rebuild
  #   volumes:
  #     - blockchain-dev-data:/app/cache
  #     - blockchain-dev-artifacts:/app/artifacts
  #   command: ["npm", "run", "node", "--", "--hostname", "0.0.0.0"]
  #   networks:
  #     - default

  # TODO: Development-only blockchain services disabled
  # hardhat-console:
  #   build:
  #     context: ./contracts
  #   profiles: ["tools"]  # Only start with --profile tools
  #   volumes:
  #     - ./contracts:/app:delegated
  #   command: ["npm", "run", "console", "--", "--network", "localhost"]
  #   depends_on:
  #     - blockchain
  #   networks:
  #     - default

volumes:
  blockchain-dev-data:
  blockchain-dev-artifacts:

networks:
  traefik-public:
    # Override external network for local development
    external: false
    driver: bridge
